#version 100
precision mediump float;
#include <tonemapping.inc>
#include <fog_ps.inc>
#include <hdr_ldr.inc>


uniform mediump vec4 LMParam[2];
uniform highp vec4 textureSize;
uniform vec4 dynamicLightColor;
uniform vec3 dynamicLightDir;
uniform vec2 specularPower;
uniform sampler2D texSampler;
uniform sampler2D texSampler1;
uniform sampler2D texSampler2;
uniform sampler2D texSampler3;
uniform sampler2D LMSampler;
uniform sampler2D SMSampler;
uniform mediump float ShadowShade;


#ifdef FILTER_COLOR
uniform mediump vec4 filterColor;
uniform mediump float filterGray;
#endif

varying mediump vec3 p_normal;
varying mediump vec3 p_tangent;
varying mediump vec3 p_binormal;
varying mediump vec4 blendines;
varying mediump vec4 ofogColor;
varying mediump vec2 texCoord;
varying mediump vec2 texCoord1;
varying mediump vec4 lightmapSpace;
varying mediump vec3 eye;

#define saturate(x) clamp( x, 0.0, 1.0 )

vec3 SurfaceNormal(vec3 n)
{
	vec3 T = p_tangent;
	vec3 B = p_binormal;
	vec3 N = gl_FrontFacing ? p_normal : -p_normal;

	vec3 r = 2.0 * n - vec3(1.0, 1.0, 1.0);
	return normalize(T*r.x + B*r.y + N*r.z);
}

void main(void)
{
	mediump vec3 LMColor = texture2d_linear(LMSampler, texCoord1.xy*LMParam[0].zw+LMParam[0].xy).rgb * LMParam[1].xyz;

	// dynamic shadow
	mediump vec3  smCoordDepth = lightmapSpace.xyz / lightmapSpace.w; 
	mediump vec2  smCoord;
	smCoord = smCoordDepth.xy * 0.5 + 0.5;
	mediump float dxx;
	mediump float dx = 1.0;
	//if(smCoord.x >= 1.0 || smCoord.y>=1.0 || smCoord.x<=0.0 || smCoord.y<=0.0)
	// 	dx = 1.0;
	//else
	{
		mediump float z = clamp(smCoordDepth.z, 0.0, 1.0);
		dxx = dot(vec4(texture2D(SMSampler, smCoord)) ,vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));
		dx = 2.71828 - exp(1024.0*(z-dxx));

	}
	dx = clamp(dx,ShadowShade,1.0);
	LMColor = LMColor*vec3(dx,dx,dx);
		
	mediump vec4 finalColor;
	finalColor  = texture2d_linear(texSampler,  texCoord/textureSize.x) * (1.0 - blendines.r);
	finalColor += texture2d_linear(texSampler1, texCoord/textureSize.y) * blendines.r;
	mediump vec3 normal;
	normal  = texture2d_linear(texSampler2,  texCoord/textureSize.x).xyz * (1.0 - blendines.r);
	normal += texture2d_linear(texSampler3, texCoord/textureSize.y).xyz * blendines.r;
	normal = SurfaceNormal(normal);
	
	mediump vec3 reflectDir = reflect(-normalize(dynamicLightDir), normalize(normal));
	mediump float rotaNdotV = saturate(dot(normalize(reflectDir), normalize(eye)));
	mediump vec3 specularColor = dynamicLightColor.xyz * specularPower.x * pow( rotaNdotV, specularPower.y);
	mediump float edge = step(ShadowShade * LMParam[1].x,LMColor.r);
	finalColor.rgb = finalColor.rgb * LMColor + specularColor * LMColor * edge;
	
	gl_FragColor = vec4(mix(ofogColor.rgb, finalColor.rgb, ofogColor.a), 1.0);
	gl_FragColor.rgb = mix(gl_FragColor.rgb, varHeightFog.rgb, ComputeHeightFog(varHeightFog.a));

#ifdef FILTER_COLOR
	mediump float gray = rgb_to_gray(gl_FragColor.r, gl_FragColor.g, gl_FragColor.b);
	mediump vec3 vec_gray = vec3(gray, gray, gray);
	gl_FragColor = vec4(mix(gl_FragColor.rgb, vec_gray, filterGray), gl_FragColor.a) * filterColor;
#endif
	gl_FragColor = hdr2ldr(gl_FragColor);
}
