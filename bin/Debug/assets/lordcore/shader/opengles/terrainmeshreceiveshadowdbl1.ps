#version 100
precision mediump float;
#include <tonemapping.inc>
#include <fog_ps.inc>
#include <hdr_ldr.inc>


uniform mediump vec4 LMParam[4];
uniform sampler2D texSampler;
uniform sampler2D texSampler1;
uniform sampler2D texSampler2;
uniform sampler2D texSampler3;
uniform sampler2D LMSampler1;
uniform sampler2D LMSampler2;
uniform sampler2D SMSampler;
uniform mediump float ShadowShade;
uniform mediump float LM1ToLM2;

#ifdef FILTER_COLOR
uniform mediump vec4 filterColor;
uniform mediump float filterGray;
#endif


varying mediump vec4 blendines;
varying mediump vec4 ofogColor;
varying mediump vec2 texCoord;
varying mediump vec2 texCoord1;
varying mediump vec4 lightmapSpace;


void main(void)
{
	mediump vec3 LMColor1 = texture2d_linear(LMSampler1, texCoord1.xy*LMParam[0].zw+LMParam[0].xy).rgb * LMParam[1].xyz;
	mediump vec3 LMColor2 = texture2d_linear(LMSampler2, texCoord1.xy*LMParam[2].zw+LMParam[2].xy).rgb * LMParam[3].xyz;

	// dynamic shadow
	mediump vec3  smCoordDepth = lightmapSpace.xyz / lightmapSpace.w; 
	mediump vec2  smCoord;
	smCoord = smCoordDepth.xy * 0.5 + 0.5;
	mediump float dxx;
	mediump float dx = 1.0;
	//if(smCoord.x >= 1.0 || smCoord.y>=1.0 || smCoord.x<=0.0 || smCoord.y<=0.0)
	// 	dx = 1.0;
	//else
	{
		mediump float z = clamp(smCoordDepth.z, 0.0, 1.0);
		dxx = dot(vec4(texture2D(SMSampler, smCoord)) ,vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));
		dx = 2.71828 - exp(1024.0*(z-dxx));

	}
	dx = clamp(dx,ShadowShade,1.0);
	mediump vec3 LMColor = mix(LMColor1 ,LMColor2,LM1ToLM2);
	
	mediump vec3 lightDiffuse = LMColor;
	mediump vec3 smColor = vec3(dx, dx, dx);
	
	mediump float diffuseGrayValue = dot( lightDiffuse.xyz, vec3(0.299, 0.587, 0.114));
	mediump float diffuseShodwMapmixRadio = clamp(diffuseGrayValue - smColor.x, 0.0, 1.0);
	lightDiffuse = mix(lightDiffuse, smColor * lightDiffuse, diffuseShodwMapmixRadio);
		
	mediump vec4 finalColor;
	finalColor  = texture2d_linear(texSampler,  texCoord) * (1.0 - blendines.r - blendines.g - blendines.b);
	finalColor += texture2d_linear(texSampler1, texCoord) * blendines.r;
	finalColor += texture2d_linear(texSampler2, texCoord) * blendines.g;
	finalColor += texture2d_linear(texSampler3, texCoord) * blendines.b;
	finalColor.rgb = finalColor.rgb * lightDiffuse;
	
	gl_FragColor = vec4(mix(ofogColor.rgb, finalColor.rgb, ofogColor.a), 1.0);
	gl_FragColor.rgb = mix(gl_FragColor.rgb, varHeightFog.rgb, ComputeHeightFog(varHeightFog.a));

#ifdef FILTER_COLOR
	mediump float gray = rgb_to_gray(gl_FragColor.r, gl_FragColor.g, gl_FragColor.b);
	mediump vec3 vec_gray = vec3(gray, gray, gray);
	gl_FragColor = vec4(mix(gl_FragColor.rgb, vec_gray, filterGray), gl_FragColor.a) * filterColor;
#endif
	gl_FragColor = hdr2ldr(gl_FragColor);	
}
