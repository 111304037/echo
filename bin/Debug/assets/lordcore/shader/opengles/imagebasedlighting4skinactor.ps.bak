#version 100

uniform sampler2D texSampler;
uniform sampler2D texMaskSampler;
uniform sampler2D texEnvBRDF;
uniform samplerCube texEnvMapA;
uniform samplerCube texEnvMapB;

uniform mediump vec4 naturalColor;
// uniform mediump vec3 litDir;
// uniform mediump vec4 litColor;
// uniform mediump vec4 ambtColor;
uniform mediump vec4 edgeColor;
uniform mediump vec4 colorParams;
uniform mediump vec3 camPos;
uniform mediump vec4 litParam[3];

varying mediump vec2 texCoord;
varying mediump vec4 worldPosition;
varying mediump vec3 worldNormal;


mediump vec3 lerp( mediump vec3 A, mediump vec3 B, mediump vec3 factor )
{
	return (vec3(1.0, 1.0, 1.0) - factor) * A + factor * B;
}

mediump vec3 GetEnvBRDFFresnel(mediump vec3 specCol0, mediump float gloss, mediump float fNdotV, sampler2D sampEnvBRDF)
{
	// Use a LUT that contains the numerically integrated BRDF for given N.V and smoothness parameters
	// x: integral for base reflectance 0.0, y: integral for base reflectance 1.0
	
	mediump vec2 envBRDF = texture2D( sampEnvBRDF, vec2( fNdotV, gloss) ).xy;
	return lerp( envBRDF.xxx, envBRDF.yyy, specCol0 );
}

mediump vec3 _GetEnvironmentCMap(samplerCube envMapA, samplerCube envMapB, mediump vec3 envTC, mediump float fGloss)
{
  mediump vec3 envColorA = textureCube(envMapA , envTC).xyz;
  mediump vec3 envColorB = textureCube(envMapB , envTC).xyz;
  return (fGloss)*envColorA +  (1.0-fGloss) * envColorB ;
}

void main(void)
{
	mediump float gloss = 0.9;
	
	mediump vec4 textureColor = texture2D(texSampler, texCoord);
	mediump vec4 maskColor = texture2D(texMaskSampler, texCoord);

  mediump vec3 Normal = normalize(worldNormal);

	mediump float diffuseLight = max(dot(litParam[0].xyz, Normal), 0.0);
	mediump vec4 diffuse = (litParam[1] * diffuseLight + litParam[2] + naturalColor);
	
	// diffuse
	mediump vec4 diffuse_color = textureColor*diffuse;
	gl_FragColor = diffuse_color;
	
	//specular
  mediump vec3 viewDir = normalize(camPos - worldPosition.rgb);
	mediump vec3 H = normalize(litParam[0].xyz + viewDir);
	mediump float NdotH = max(dot(Normal, H),0.0);
	mediump vec3 reflect_dir = normalize(reflect(-viewDir, Normal));
	
	//rim
	mediump float cosView = dot(viewDir, Normal);
  mediump float shineEdge = pow(1.0 - cosView*cosView, (1.0 - maskColor.r)*colorParams.y*128.0);
  
	gl_FragColor += max(shineEdge * edgeColor, 0.0);


	gl_FragColor*= 0.0000001;
	
	mediump float _gloss = maskColor.g;
	
	mediump vec3 env_color = _GetEnvironmentCMap(texEnvMapA, texEnvMapB, reflect_dir, _gloss );

	mediump vec3 fresnel = GetEnvBRDFFresnel(maskColor.rrr, _gloss, cosView, texEnvBRDF);
	
//	env_color *= 0.00000001;
	
	fresnel *= env_color.xyz;

//	gl_FragColor *= vec4(fresnel,1.0);
	gl_FragColor += (diffuse_color);
	gl_FragColor.xyz += (_gloss+colorParams.z) * fresnel;
	
	mediump vec3 ambient_color = textureCube(texEnvMapB, Normal).xyz;
//	ambient_color *= colorParams.y;
//	gl_FragColor.xyz += ambient_color;
//	gl_FragColor *= 0.0000001;
//	gl_FragColor += vec4(fresnel,1.0);
}