#version 100
precision mediump float;

//后处理源贴图
uniform sampler2D texSampler;
//render target size
uniform vec2 RTSize;
//混合颜色
uniform vec4 colorMix;
//从播放开始的流逝时间
uniform float elapsedTime;
//各闪电分段的持续时间
uniform vec4 durationTimes;
//闪电强度
uniform float intensity;
//UV
varying mediump vec2 texCoord;

void main()
{
	mediump vec2 texelSize = vec2(1.0 / RTSize);
	float timeFactor = 1.0;
	if(elapsedTime < durationTimes[0]) //播放第一个闪电
	{
		timeFactor = (elapsedTime)/durationTimes[0];
	}
	else if(elapsedTime < durationTimes[0] + durationTimes[1]) //播放第二个闪电
	{
		timeFactor = (elapsedTime - durationTimes[0])/durationTimes[1];
	}
	else if(elapsedTime < durationTimes[0]+durationTimes[1] + durationTimes[2]) //播放第三个闪电
	{
		timeFactor = (elapsedTime - (durationTimes[0]+durationTimes[1]))/durationTimes[2];
	}
	else if(elapsedTime < durationTimes[0]+ durationTimes[1]+durationTimes[2]+durationTimes[3]) //播放第四个闪电
	{
		timeFactor = (elapsedTime - (durationTimes[0]+durationTimes[1] + durationTimes[2]) )/durationTimes[3];
	}
	
	timeFactor = max(timeFactor,0.0);

	mediump vec4 color = texture2D(texSampler, texCoord);
	color = max(color, texture2D (texSampler, texCoord + texelSize * vec2(1.5,1.5)));	
	color = max(color, texture2D (texSampler, texCoord + texelSize * vec2(-1.5,1.5)));
	color = max(color, texture2D (texSampler, texCoord + texelSize * vec2(-1.5,-1.5)));	
	color = max(color, texture2D (texSampler, texCoord + texelSize * vec2(1.5,-1.5)));	
	float grayScale = color.r*0.3 + color.g*0.59 + color.b * 0.11;
	gl_FragColor = clamp(vec4(grayScale * color)* colorMix - timeFactor + (intensity - 1.0) * colorMix,vec4(0,0,0,0),vec4(1,1,1,1));
}