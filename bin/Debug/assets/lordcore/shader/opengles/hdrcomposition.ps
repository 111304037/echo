#version 100

uniform sampler2D sceneColorSampler;
uniform sampler2D sceneLuminanceSampler;
uniform sampler2D sceneBloomSampler;


//vec4.x : exposure variable // 0.5
//vec4.y : gaussian scalar   // 0.4
//vec4.z : reciprocal width of bloom texture
//vec4.w : reciprocal height of bloom texture
uniform mediump vec4 exposure_gaussianScalar_rcpW_rcpH;

varying mediump vec2 texCoord;

void main(void)
{
	mediump float exposure = 0.5; // 0.5
	mediump float gaussianScalar = 0.4; // 0.4
	
	 mediump vec4 c = texture2D( sceneColorSampler, texCoord );
	 mediump vec4 l = texture2D( sceneLuminanceSampler, vec2(0.5, 0.5) ); // r: average gray value , g: maximum gray value
	c = c * vec4(1.5, 1.5, 1.5, 1.0);
     mediump float xWeight = fract( texCoord.x / exposure_gaussianScalar_rcpW_rcpH.z ) - 0.5;
	 
     mediump float xDir = xWeight;
     xWeight = abs( xWeight );
     xDir /= xWeight;
     xDir *= exposure_gaussianScalar_rcpW_rcpH.z;

     mediump float yWeight = fract( texCoord.y / exposure_gaussianScalar_rcpW_rcpH.w ) - 0.5;
     mediump float yDir = yWeight;
     yWeight = abs( yWeight );
     yDir /= yWeight;
     yDir *= exposure_gaussianScalar_rcpW_rcpH.w;

    mediump vec4 b = ((1.0 - xWeight) * (1.0 - yWeight)) * texture2D( sceneBloomSampler, texCoord );        
    b += (xWeight * (1.0 - yWeight)) * texture2D( sceneBloomSampler, texCoord + vec2( xDir * 0.13, 0.0 ) );
    b += (yWeight * (1.0 - xWeight)) * texture2D( sceneBloomSampler, texCoord + vec2( 0.0, yDir * 0.13 ) );
    b += (xWeight * yWeight) * texture2D( sceneBloomSampler, texCoord + vec2( xDir * 0.13, yDir * 0.13 ) );	
	
    // Compute the actual colour:
    mediump vec4 final = c + 0.25 * b;	
	
    mediump float Lp = (exposure / l.r) * max( final.r, max( final.g, final.b ) );	

   mediump float LmSqr = (l.g + gaussianScalar * l.g) * (l.g + gaussianScalar * l.g);

   mediump float toneScalar = ( Lp * ( 1.0 + ( Lp / ( LmSqr ) ) ) ) / ( 1.0 + Lp );
	c = final * toneScalar;
    c.a = 1.0;
    gl_FragColor = c;	
}