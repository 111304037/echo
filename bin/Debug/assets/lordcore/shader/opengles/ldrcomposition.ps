#version 100

uniform sampler2D sceneColorSampler;

uniform sampler2D sceneBloomSampler;


//vec4.x : exposure variable
//vec4.y : gaussian scalar 
//vec4.z : reciprocal width of bloom texture
//vec4.w : reciprocal height of bloom texture
uniform mediump vec2 RTSize;
uniform mediump float intensity;
varying mediump vec2 texCoord;

void main(void)
{
	mediump vec4 exposure_gaussianScalar_rcpW_rcpH = vec4(0.0, 0.0, 1.0/RTSize);	
	mediump vec4 c = texture2D( sceneColorSampler, texCoord );
	 
	mediump float xWeight = fract( texCoord.x / exposure_gaussianScalar_rcpW_rcpH.z ) - 0.5;
	 
	mediump float xDir = xWeight;
	xWeight = abs( xWeight );
	xDir /= xWeight;
	xDir *= exposure_gaussianScalar_rcpW_rcpH.z;

	mediump float yWeight = fract( texCoord.y / exposure_gaussianScalar_rcpW_rcpH.w ) - 0.5;
	mediump float yDir = yWeight;
	yWeight = abs( yWeight );
	yDir /= yWeight;
	yDir *= exposure_gaussianScalar_rcpW_rcpH.w;

	// sample the blur texture for the 4 relevant pixels, weighted accordingly
	mediump vec4 b = ((1.0 - xWeight) * (1.0 - yWeight)) * texture2D( sceneBloomSampler, texCoord  );        
	b += (xWeight * (1.0 - yWeight)) * texture2D( sceneBloomSampler, texCoord + vec2( xDir * 0.13, 0.0 ) );
	b += (yWeight * (1.0 - xWeight)) * texture2D( sceneBloomSampler, texCoord + vec2( 0.0, yDir * 0.13  ) );
	b += (xWeight * yWeight) * texture2D( sceneBloomSampler, texCoord + vec2( xDir * 0.13, yDir * 0.13) );	

	// Compute the actual colour:
	mediump vec4 final = c + intensity * b;

	gl_FragColor = final;
}
