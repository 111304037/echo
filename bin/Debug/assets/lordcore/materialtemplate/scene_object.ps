#version 100

precision mediump float;
#include <tonemapping.inc>
#include <fog_ps.inc>
#include <hdr_ldr.inc>

#ifdef EFFECT_COLOR
#include <effect_color.inc>
#endif

#define saturate(x) clamp( x, 0.0, 1.0 )

uniform vec4 AmbientColor;
uniform sampler2D Albedo;

varying vec2 texcoord0;
varying vec3 viewNormal;

#ifdef LIGHT_FROM_LIGHTARRAY
    uniform mediump vec4 LightArrayData[16];

    varying vec3 lightDir0;
    varying vec3 lightDir1;
#endif

#ifdef LIGHT_FROM_SCENE
    uniform mediump vec4 SceneObjectLightParams[3];
    varying vec3 lightDir2;
#endif

#ifdef TRANSPARENT
	uniform mediump float AlphaValue;
#endif

#ifdef RECEIVE_FOG
	varying vec4 ofogColor;
#endif

#ifdef ENV_MAP
	uniform mediump vec3  CameraPosition;
	uniform sampler2D tGloss;
    
  #ifdef USE_SCENE_ENV_MAP
	uniform sampler2D SceneEnvSampler;
  #else
    uniform sampler2D EnvSampler;
  #endif
    
    uniform mediump float EnvStrength;
	varying vec3 position1;
	varying vec3 normal;
	
	vec3 computeEnvColor(vec3 en, float V)
	{
		en /= dot(vec3(1.0), abs(en));
		vec2 eH = abs(en.zx) - vec2(1.0, 1.0);
		vec2 eI = vec2(en.x < 0.0 ? eH.x : -eH.x, en.z < 0.0 ? eH.y : -eH.y);
		vec2 eJ = (en.y < 0.0) ? eI : en.xz; 
		eJ = vec2(0.5*(254.0 / 256.0), 0.125*0.5*(254.0 / 256.0))*eJ + vec2(0.5, 0.125*0.5);
		float eK = fract(7.0*V);
		eJ.y += 0.125*(7.0*V - eK);
		eJ.y = 1.0 - eJ.y;
		vec2 eL = eJ - vec2(0.0, 0.125);

  #ifdef USE_SCENE_ENV_MAP
		vec4 sky1 = (texture2D(SceneEnvSampler, eJ));
		vec4 sky2 = (texture2D(SceneEnvSampler, eL));
  #else
        vec4 sky1 = (texture2D(EnvSampler, eJ));
		vec4 sky2 = (texture2D(EnvSampler, eL));
  #endif
		vec4 eM = mix(sky1, sky2, eK);
		vec3 r = eM.xyz*(7.0*eM.w);
		
		return r*r;
	}
#endif

float mixColor(in float srcColor, in float blendColor)
{
	return srcColor < 0.5 ? (2.0 * srcColor * blendColor) : (1.0 - 2.0 * (1.0 - srcColor) * (1.0 - blendColor));
}

vec4 mixColor(in vec3 srcColor, in vec3 blendColor)
{
	return vec4(mixColor(srcColor.r, blendColor.r), mixColor(srcColor.g, blendColor.g), mixColor(srcColor.b, blendColor.b), 1.0);
}

void main ()
{	
	vec4 albedoTexture = texture2d_linear(Albedo, texcoord0);
	vec3 albedo = albedoTexture.rgb;
    
#ifdef ALPHA_TEST
    albedoTexture.a = step(0.5, albedoTexture.a);
#endif
    
    vec3 N = normalize(viewNormal);
    vec3 litFromLightArray = vec3(0.0);
    vec3 litFromScene = vec3(0.0);
    vec3 ambientFromScene = vec3(0.0);
    
#ifdef LIGHT_FROM_LIGHTARRAY
    vec3 lightColor0 = LightArrayData[0].rgb;
    vec3 lightColor1 = LightArrayData[2].rgb;
    vec3 L0 = normalize(lightDir0);
    vec3 L1 = normalize(lightDir1);

    float L0dotN = saturate(dot(L0, N));
    float L1dotN = saturate(dot(L1, N));
    
    litFromLightArray = lightColor0 * L0dotN + lightColor1 * L1dotN;
#endif
    
#ifdef LIGHT_FROM_SCENE
    vec3 L2 = normalize(lightDir2);
    vec3 lightColor2 = SceneObjectLightParams[1].rgb;
    ambientFromScene = SceneObjectLightParams[2].rgb;
    float L2dotN = saturate(dot(L2, N));
    litFromScene = lightColor2 * L2dotN * SceneObjectLightParams[1].w;
#endif

#ifdef ENV_MAP
	#ifdef ENVMAP_ORDER
		vec3 eye = normalize(CameraPosition - position1);
		vec3 reflectDir = reflect(-eye, normal);
		float gloss = texture2D(tGloss,texcoord0).r;
		vec3 envColor = computeEnvColor(reflectDir, gloss);

		albedo += envColor*EnvStrength*gloss;
	#endif
#endif
    
    vec3 diffIntens = litFromLightArray + litFromScene;
    vec3 ambiIntens = AmbientColor.rgb + ambientFromScene.rgb;
  
 #ifdef COLOR_BLEND 
	vec3 result = mixColor(albedo, ambiIntens + diffIntens).rgb;
#else
	vec3 result = albedo * (ambiIntens + diffIntens);
#endif
  
	vec4 finalColor = vec4(result, 1.0);

#ifdef EFFECT_COLOR
	finalColor = ComputeEffectColor(finalColor);
#endif
	gl_FragColor = finalColor;

#ifdef TRANSPARENT
	gl_FragColor.a = AlphaValue * albedoTexture.a;
#else
	#ifdef EMISSIVE
		gl_FragColor.rgb = gl_FragColor.rgb + albedoTexture.a * albedoTexture.rgb * 2.0;
	#else
		gl_FragColor.a = albedoTexture.a;
	#endif
#endif
    
#ifdef RECEIVE_FOG
	gl_FragColor.xyz = mix(ofogColor.xyz, gl_FragColor.xyz, ofogColor.a);
	gl_FragColor.rgb = mix(gl_FragColor.rgb, varHeightFog.rgb, ComputeHeightFog(varHeightFog.a));
#endif


#ifdef ENV_MAP
	#ifndef ENVMAP_ORDER
		vec3 eye = normalize(CameraPosition - position1);
		vec3 reflectDir = reflect(-eye, normal);
		float gloss = texture2D(tGloss,texcoord0).r;
		vec3 envColor = computeEnvColor(reflectDir, gloss);

		gl_FragColor.xyz = gl_FragColor.xyz + envColor*EnvStrength*gloss;
	#endif
#endif

	gl_FragColor = hdr2ldr(gl_FragColor);
}

