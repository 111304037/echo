#version 100
precision mediump float;
#include <tonemapping.inc>
#include <fog_ps.inc>
#include <hdr_ldr.inc>

uniform mediump vec4 ActorLitParam[3]; // 0.sunDir  1.sunColor 2.environmentColor
uniform float _RimIntensity;
uniform float _RimPower;
uniform vec3 _RimDirection;
uniform vec4 _RimColor;
uniform sampler2D Albedo;

#ifdef EFFECT_COLOR
#include <effect_color.inc>
#endif

#ifdef ALPHA_TEST
	uniform float _AlphaTestValue;
#endif

varying vec2 texcoord0;
varying vec3 viewNormal;
varying vec3 viewDir;

varying vec4 ofogColor;

#ifdef RIME_LIGHT
#include <rime_light.inc>
#endif

void main ()
{	
	vec4 albedoTexture = texture2d_linear(Albedo, texcoord0);

#ifdef ALPHA_TEST
	if(albedoTexture.a < _AlphaTestValue)
	{
		discard;
	}
#endif

	vec3 albedo = albedoTexture.rgb;
	vec3 lightColor = ActorLitParam[1].rgb;
	vec3 ambientcolor = ActorLitParam[2].rgb;
	
	vec3 N = normalize(viewNormal);
	vec3 V = normalize(viewDir);
	vec3 R = normalize(_RimDirection);
	
	float NdotR = max(0.0, dot(N, R));
	float NdotV = max(0.0, dot(N, V));
	
	vec3 ambiIntens = albedo * (ambientcolor + lightColor) * 2.0;
	
	vec3 rimIntens = pow(max(0.0,NdotR*(1.0 - NdotV)), _RimPower) * _RimIntensity * _RimColor.rgb * albedo;
  	vec3 rimeColor = vec3(0.000001);
#ifdef RIME_LIGHT
	rimeColor = calcRimeColor(N, V);
#endif
	vec3 result = ambiIntens + rimIntens + rimeColor;
  
	vec4 finalColor = vec4(result, 1.0);
#ifdef EFFECT_COLOR
	finalColor = ComputeEffectColor(finalColor);
#endif
	gl_FragColor = finalColor;
	gl_FragColor.rgb = mix(ofogColor.xyz, gl_FragColor.xyz, ofogColor.a);
	gl_FragColor.rgb = mix(gl_FragColor.rgb, varHeightFog.rgb, ComputeHeightFog(varHeightFog.a));
    
    gl_FragColor.rgb = max(gl_FragColor.xyz, vec3(0.0));
    
	gl_FragColor = hdr2ldr(gl_FragColor);
}

