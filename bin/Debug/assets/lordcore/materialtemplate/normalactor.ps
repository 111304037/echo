#version 100
precision mediump float;
#include <tonemapping.inc>
#include <fog_ps.inc>
#include <hdr_ldr.inc>

uniform vec3 CameraDirection;
uniform vec4 _LightColor0;

uniform sampler2D Albedo;
uniform sampler2D AOSampler;
//uniform sampler2D lightMapSampler;

uniform float _RimFX;
uniform float _RimIntensity;
uniform float _RimPower;
uniform vec4 _BaseColor;
uniform float _LightTextureIntensity;

uniform mediump int  LightArrayInfo[8];
uniform mediump vec4 LightArrayData[16];

uniform mat4 matWV;

varying vec2 xlv_TEXCOORD0;
varying vec3 worldNormal;

varying vec4 ofogColor;

vec3 lightPhase(vec4 lightColor, vec4 lightDir, float angle)
{
    vec3 u_xlat1 = worldNormal * -normalize(lightDir.xyz) + vec3(0.1);
    angle = 1.0 - angle;
    angle = dot(u_xlat1, vec3(angle));

    angle = clamp(angle, 0.0, 1.0);

    return lightColor.xyz * pow(angle, _RimPower) * _RimIntensity;
}

void main ()
{
    vec3 normal = normalize(worldNormal);

    vec4 diffuseColor = texture2d_linear(Albedo, xlv_TEXCOORD0);

    diffuseColor = vec4(pow(diffuseColor.xyz, vec3(_RimFX)), diffuseColor.w);

    vec4 LightColor = LightArrayData[0];
    vec4 LightDir = LightArrayData[1];
    LightDir.xyz  = (mat3(matWV) * normalize(LightDir.xyz));

    // float lightMapCoord;
    vec3 dir = normalize(-CameraDirection);

    float angle = max(dot(worldNormal, dir), 0.0);

    vec3 lightPhaseColor = lightPhase(LightColor, LightDir, angle);

    vec4 finalColor;
    finalColor.w = 1.0;
    finalColor.xyz = lightPhaseColor + diffuseColor.xyz * _BaseColor.xyz * _LightTextureIntensity;

    gl_FragColor = finalColor;

    gl_FragColor.xyz = mix(ofogColor.xyz, gl_FragColor.xyz, ofogColor.a);
	gl_FragColor.rgb = mix(gl_FragColor.rgb, varHeightFog.rgb, ComputeHeightFog(varHeightFog.a));
	gl_FragColor = hdr2ldr(gl_FragColor);
}

