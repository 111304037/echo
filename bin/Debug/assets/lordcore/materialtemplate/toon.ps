#version 100

precision highp float;
precision highp int;

#include <tonemapping.inc>

uniform vec4 Color;
uniform float LightArea;
uniform float SecondShadow;
uniform vec3 FirstShadowMultColor;
uniform vec3 SecondShadowMultColor;
uniform float Shininess;
uniform float SpecMulti;
uniform vec3 LightSpecColor;

uniform int LightArrayInfo[8];
uniform vec4 LightArrayData[16];

uniform vec3 CameraPosition;

uniform sampler2D LightMapTex;
uniform sampler2D Albedo;

varying vec4 vs_COLOR0;
varying vec2 vs_TEXCOORD0;
varying vec3 Norm;
varying vec3 FragPos;

void main()
{
	float diffuseFactor = dot(Norm, -LightArrayData[1].xyz) * 0.4975 + 0.5;
	vec3 lmc = texture2d_linear(LightMapTex, vs_TEXCOORD0).xyz;
	float shadow = lmc.g * vs_COLOR0.x;
	shadow = (vs_COLOR0.x * lmc.g < 0.5) ? (shadow * 1.25 - 0.125) : (shadow * 1.2 - 0.1);
	vec3 diffuse = texture2d_linear(Albedo, vs_TEXCOORD0).xyz;
	vec3 color0 = diffuse * FirstShadowMultColor;
	vec3 color1 = (shadow + diffuseFactor > 2 * LightArea) ? diffuse : color0;
	color0 = (vs_COLOR0.x * lmc.g + diffuseFactor > 2 * SecondShadow) ? color0 : (diffuse * SecondShadowMultColor);
	color0 = (vs_COLOR0.x * lmc.g > 0.09) ? color1 : color0;
	diffuse = normalize(normalize(CameraPosition - FragPos) - LightArrayData[1].xyz);
	float specular = exp2(log2(max(dot(Norm, diffuse), 0.0)) * Shininess);
	color1 = (specular + lmc.z < 1.0) ? vec3(0.0) : (lmc.x * SpecMulti * LightSpecColor.xyz);
	gl_FragColor.rgb = (color0 + color1) * Color.xyz;
}
