MESSAGE(STATUS "Configuring module: GLES2Render...")

# set include files
SET(INCLUDE_FILES 
	${LORD_ROOT_PATH}/
	${LORD_SRC_PATH}/
	${LORD_SRC_PATH}/Foundation/ThirdParty
	${LORD_SRC_PATH}/GLES2Render
	${LORD_SRC_PATH}/GLES2Render/GPUProxy
	${LORD_SRC_PATH}/GLES2Render/RenderTask
)

IF(${LORD_PLATFORM_WIN32})
  LIST(APPEND INCLUDE_FILES ${LORD_DEP_PATH}/AdrenoSDK/Inc)
ENDIF()

INCLUDE_DIRECTORIES( ${INCLUDE_FILES} )

IF(${LORD_PLATFORM_ANDROID})
  LIST(APPEND INCLUDE_FILES ${LORD_DEP_PATH}/GL/Android/Include)
ENDIF()

# recursive get all c++ files
FILE(GLOB_RECURSE HEADER_FILES *.h *.inl)
FILE(GLOB_RECURSE SOURCE_FILES *.cpp)

SET(ALL_FILES ${HEADER_FILES} ${SOURCE_FILES})

GROUP_FILES(ALL_FILES ${CMAKE_CURRENT_SOURCE_DIR})

IF(LORD_GLES_STATIC)
  ADD_DEFINITIONS("-DLORD_GLES2RENDER_STATIC")
ENDIF()

ADD_DEFINITIONS("-DLORD_GLES2RENDER_EXPORTS")
ADD_DEFINITIONS("-DTOLUA_STATIC")

IF(LORD_UNICODE)
	ADD_DEFINITIONS("-DUNICODE -D_UNICODE")
ENDIF()

IF (LORD_STATIC)
	SET(GLES2RENDER_NAME "LordGLES2Render")
ELSE()
	SET(GLES2RENDER_NAME "LordGLES2Render")
ENDIF()

IF(${LORD_PLATFORM_WIN32})
	ADD_DEFINITIONS("-D_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS")
	LINK_DIRECTORIES(
		${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
	)
ENDIF()

IF (LORD_GLES_STATIC)
	ADD_LIBRARY(GLES2Render STATIC ${HEADER_FILES} ${SOURCE_FILES})
ELSE()
	ADD_LIBRARY(GLES2Render SHARED ${HEADER_FILES} ${SOURCE_FILES})
ENDIF()

IF(LORD_BUILD_PLATFORM_ANDROID)
	#android_ndk_gdb_debuggable(GLES2Render) 
  SET_TARGET_PROPERTIES(GLES2Render PROPERTIES VC_MDD_ANDROID_PLATFORM_TOOLSET "Clang_3_6")
  SET_TARGET_PROPERTIES(GLES2Render PROPERTIES VC_MDD_ANDROID_USE_OF_STL "gnustl_shared")
  SET_TARGET_PROPERTIES(GLES2Render PROPERTIES VC_MDD_ANDROID_API_LEVEL  "android-19")
  
  SET_PROPERTY(TARGET GLES2Render PROPERTY C_STANDARD 11)
  SET_PROPERTY(TARGET GLES2Render PROPERTY CXX_STANDARD 14)
  SET_PROPERTY(TARGET GLES2Render PROPERTY VC_MDD_ANDROID_EXCEPTION_HANDLING "Enabled")
  SET_PROPERTY(TARGET GLES2Render PROPERTY VC_MDD_ANDROID_HAVE_RTTI "true")
ENDIF()

IF(APPLE)
  SET_TARGET_PROPERTIES(GLES2Render PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++14")
ENDIF()

SET_TARGET_PROPERTIES(GLES2Render PROPERTIES OUTPUT_NAME ${GLES2RENDER_NAME})
SET_TARGET_PROPERTIES(GLES2Render PROPERTIES FOLDER "core")

IF(LORD_PLATFORM_WIN32)
	SET_PROPERTY(TARGET GLES2Render PROPERTY COMPILE_FLAGS "/Fd${LORD_LIB_PATH}$(Configuration)/${GLES2RENDER_NAME}.PDB")
ENDIF()

MESSAGE(STATUS "Configure success!")
