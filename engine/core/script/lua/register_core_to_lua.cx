#include "lua_binder.h"
#include "engine/core/log/Log.h"

// 1.utils
const char* utils = R"(
utils = {}
function utils.append_table(a, b)
    for k, v in pairs(b) do
        a[k] = v
    end
end

objs = {}
nodes = {}
channels = {}
		
function update_all_nodes()
    for k, v in pairs(nodes) do
		if v.update ~= nil then
			v:update()
		end
    end
end

function update_all_channels()
    for k, v in pairs(channels) do
        v()
    end
end
)";

// 2.math vec2
const char* vec2 = R"(
vec2 = {}
vec2.__index = vec2

function vec2:new(xv, yv)
    return setmetatable({x=xv, y=yv}, vec2)
end

function vec2:length()
    return math.sqrt(self.x * self.x + self.y * self.y)
end

function vec2:normalize()
    local len = self:length()
    if len > 0.000001 then
        return vec2:new(self.x/len, self.y/len)
    else
        return vec2:new(0.0, 0.0)
    end
end

function vec2:__call(xv, yv)
    return vec2:new(xv, yv)
end

function vec2:__add(other)
    return vec2:new(self.x+other.x, self.y+other.y)
end

function vec2:__sub(other)
    return vec2:new(self.x-other.x, self.y-other.y)
end

function vec2:__mul(scale)
    return vec2:new(self.x * scale, self.y * scale)
end

setmetatable(vec2, vec2)
)";

// 2.math
const char* vec3 = R"(
vec3 = {}
vec3.__index = vec3

function vec3:new(xv, yv, zv)
	return setmetatable({x=xv, y=yv, z=zv}, vec3)
end

function vec3:length()
	return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z)
end

function vec3:normalize()
	local len = self:length()
	if len > 0.000001 then
		return vec3:new(self.x/len, self.y/len, self.z/len)
	else
		return vec3:new(0.0, 0.0, 0.0)
	end
end

function vec3:dot(rhs)
	return self.x*rhs.x + self.y*rhs.y + self.z*rhs.z
end

function vec3:cross(rhs)
    vec = vec3(0.0, 0.0, 0.0)

    vec.x = self.y * rhs.z - self.z * rhs.y
    vec.y = self.z * rhs.x - self.x * rhs.z
    vec.z = self.x * rhs.y - self.y * rhs.x

    return vec
end

function vec3:__call(xv, yv, zv)
	return vec3:new(xv, yv, zv)
end

function vec3:__add(other)
	return vec3:new(self.x+other.x, self.y+other.y, self.z+other.z)
end

function vec3:__sub(other)
	return vec3:new(self.x-other.x, self.y-other.y, self.z-other.z)
end

function vec3:__mul(scale)
	return vec3:new(self.x * scale, self.y * scale, self.z * scale)
end

setmetatable(vec3, vec3)
)";

// 2.math
const char* math_quaternion = R"(
quaternion = {}
quaternion.__index = quaternion

function quaternion:new(xv, yv, zv, wv)
	return setmetatable({x=xv, y=yv, z=zv, w=wv}, quaternion)
end

function quaternion:length()
	return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z + self.w * self.w)
end

function quaternion:normalize()
	local len = self:length()
	return quaternion:new(self.x/len, self.y/len, self.z/len, self.w/len)
end

function quaternion:__call(xv, yv, zv, wv)
	return quaternion:new(xv, yv, zv, wv)
end

function quaternion:__add(other)
	return quaternion:new(self.x+other.x, self.y+other.y, self.z+other.z, self.w+other.w)
end

function quaternion:__sub(other)
	return quaternion:new(self.x-other.x, self.y-other.y, self.z-other.z, self.w-other.w)
end

function quaternion:__mul(scale)
	return quaternion:new(self.x * scale, self.y * scale, self.z * scale, self.w*scale)
end

function quaternion:rotateVec3(vec)
    qvec = vec3(self.x, self.y, self.z)
    uv = qvec:cross(vec)
    uuv = qvec:cross(uv)
    uv = uv * 2.0 * self.w
    uuv = uuv * 2.0

    return vec + uv + uuv
end

function quaternion:getRadian()
	return math.acos(self.w) * 2.0
end

function quaternion:getDegree()
	return math.deg(math.acos(self.w) * 2.0)
end

setmetatable(quaternion, quaternion)
)";

namespace Echo
{
	void registerCoreToLua()
	{
		// core library
		{
			LuaBinder::instance()->execString(utils, true);
            LuaBinder::instance()->execString(vec2, true);
			LuaBinder::instance()->execString(vec3, true);

			LuaBinder::instance()->execString(math_quaternion, true);
			BIND_METHOD(Quaternion::fromVec3ToVec3, DEF_METHOD("quaternion.fromVec3ToVec3"));
		}
	}
}
