#ifndef __ECHO_I_ELEMENT_H__
#define __ECHO_I_ELEMENT_H__

#include "Engine/Core.h"

namespace Echo
{

	class  IElement
	{
	public:
		IElement(void) {};
		virtual ~IElement(void) {};

		///
		typedef map<String, String>::type PropertyValueList;
		typedef vector<String>::type PropertyList;

		////
		enum PropertyType
		{
			PT_BOOL,
			PT_CHAR,
			PT_UCHAR,
			PT_SHORT,
			PT_USHORT,
			PT_INT,
			PT_UINT,
			PT_LONG,
			PT_ULONG,
			PT_REAL,
			PT_FLOAT,
			PT_DOUBLE,
			PT_VECTOR2,
			PT_VECTOR3,
			PT_DIRECTION,
			PT_VECTOR4,
			PT_MATRIX3,
			PT_MATRIX4,
			PT_QUATERNION,
			PT_COLOR,
			PT_STRING,
			PT_STRINGJUSTREAD,
			PT_COMPARE,
			PT_INTERPOLATION,
			PT_RENDERQUEUE,
			PT_MESH_SURFACE_DISTRIBUTION,
			PT_VECTOR2_ARRAY,
			PT_VECTOR3_ARRAY,
			PT_INTERSECTION_TYPE,
			PT_INTERPARTICLECOLLISIONRESPONSE_TYPE,
			PT_EMITS_TYPE,
			PT_MATERIAL_BLEND_MODE,
			PT_KEYFRAME_SLERP_MODE,
			PT_LIGHTNING_FILTER_MODE,
			PT_LIGHTNING_VARIABLEAMPLITUDE_TYPE,
			PT_MATERIAL_TEXTURE,
			PT_COMPONENT_TYPE,
			PT_COLLISION_TYPE,
			PT_TEXTUREANIMATION_TYPE,
			PT_COLOURLIST_TYPE,
			PT_COLOUROPERATION_TYPE,
			PT_FLOAT_RECT_ARRAY,
			PT_SCALE_EVENT_TYPE,
			PT_FORCEAPP_TYPE,
			PT_REAL_ARRAY,
			PT_TEXCOORDDIRECTION_TYPE,
			PT_LIGHT_TYPE,
			PT_BILLBOARD_TYPE,
			PT_BILLBOARDCHAIN_TYPE,
			PT_BILLBOARDORIGIN_TYPE,
			PT_BILLBOARDROTATION_TYPE,
			PT_ENTITY_MESH_NAME_TYPE,
			PT_ENTITY_ORIENTATION_TYPE,
			PT_DYNAMIC_ATTRIBUTE_TYPE,
			PT_COLOR_MAP_TYPE,
			PT_COLOR_OPERATION,
			PT_EFFECT_LEVEL,
			PT_MODEL_NAME_TYPE,
			PT_MT_MODEL_NAME_TYPE,
			PT_SKIN_NAME_TYPE,
			PT_SKELETON_NAME_TYPE,
			PT_MODEL_ANIMATION_TYPE,
			PT_SKIN_BONE_TYPE,
			PT_CHILDEFFECT_NAME_TYPE,
			PT_REFERENCEDEFFECT_NAME_TYPE,
			PT_MATERIAL_MTL,
			PT_MATERIAL_ADVCOLOR_0,
			PT_MATERIAL_ADVCOLOR_1,
			PT_RENDERLEVEL,
			PT_DISTORTION_TYPE,
			PT_RENDER_PRIORITY,
			PT_UV2_BLENDMODE,
			PT_UNKNOWN
		};

		//interface
		virtual void getPropertyList(PropertyList & list) {}
		virtual bool getPropertyType(const String & name, PropertyType &type) { return false;}
		virtual bool getPropertyValue(const String & name, String &value) {return false;}
		virtual bool setPropertyValue(const String & name,const String & value) {return false;}

		enum
		{
			// Effect System
			TOKEN_SYSTEM,
			TOKEN_PS_SCALE,
			TOKEN_PS_SCALE_TIME,
			TOKEN_PS_LOD_DISTANCE1,
			TOKEN_PS_LOD_DISTANCE2,
			TOKEN_PS_FALLOW_PAIR,
			TOKEN_PS_2DEFFECT,
			TOKEN_PS_POSITIONX,
			TOKEN_PS_POSITIONY,
			TOKEN_PS_FADETIME,

			// EffectLayer System
			TOKEN_LAYER,
			TOKEN_LY_NAME,
			TOKEN_LY_RENDERLEVEL,				// 渲染级别 
			TOKEN_LY_LODLEAVE,
			TOKEN_LY_PUPPET,
			TOKEN_LY_SPACEWARP,
			TOKEN_LY_RENDERGROUP,
			TOKEN_LY_REPLAYCOUNT,
			TOKEN_LY_REPLAYTIME,
			TOKEN_LY_RESTATELOOP,

			// 2d 3d billboard system
			TOKEN_LY_BB_WIDTH,
			TOKEN_LY_BB_HEIGHT,
			TOKEN_LY_BB_PERPENDICULAR,
			TOKEN_LY_BB_NOSCALEWIDTH,
			TOKEN_LY_BB_NOSCALEHEIGHT,
			TOKEN_LY_BB_CENTEROFFSETW,
			TOKEN_LY_BB_CENTEROFFSETH,
			TOKEN_LY_BB_OFFSETVIEWPORT,
			TOKEN_LY_3BB_USE_GROUND_NORMAL,
			TOKEN_LY_3BB_NEED_UPDATE,
			TOKEN_LY_3BB_USE_TERRAIN_HEIGHT,

			// column system
			TOKEN_LY_CO_RADIUSBOTTOM,
			TOKEN_LY_CO_RADIUSTOP,
			TOKEN_LY_CO_HEIGHT,
			TOKEN_LY_CO_SEGMENT,
			TOKEN_LY_CO_NOSCALERADIUS,
			TOKEN_LY_CO_NOSCALEHEIGHT,
			TOKEN_LY_CO_KEEPCENTER,
			TOKEN_LY_CO_TEXCLAMP,

			// paraboloidal system
			TOKEN_LY_PB_PARAM,
			TOKEN_LY_PB_HEIGHT,

			// trail system
			TOKEN_LY_TR_POSITION1,
			TOKEN_LY_TR_POSITION2,
			TOKEN_LY_TR_DURATIONTIME,
			TOKEN_LY_TR_FALLOWPARENT,
			TOKEN_LY_TR_ENDTIME,
			TOKEN_LY_TR_ANIM_ENABLE,
			TOKEN_LY_TR_ANIM_STEP,
			TOKEN_LY_TR_ANIM_BEGINTIME,
			TOKEN_LY_TR_ANIM_ANIMNAME,
			TOKEN_LY_TR_ANIM_SKELNAME,
			TOKEN_LY_TR_ANIM_BONENAME,
			TOKEN_LY_TR_ANIM_POSOFFSET,
			TOKEN_LY_TR_ANIM_ORIOFFSET,

			// lightning system
			TOKEN_LY_LN_BEGINPOS,
			TOKEN_LY_LN_ENDPOS,
			TOKEN_LY_LN_SEGMENT,
			TOKEN_LY_LN_NUM,
			TOKEN_LY_LN_WAVELEN,
			TOKEN_LY_LN_TIMESPIN,
			TOKEN_LY_LN_STARTWIDTH,
			TOKEN_LY_LN_ENDWIDTH,
			TOKEN_LY_LN_MIDDERWIDTH,
			TOKEN_LY_LN_STARTALPHA,
			TOKEN_LY_LN_ENDALPHA,
			TOKEN_LY_LN_MIDDERALPHA,
			TOKEN_LY_LN_USENORMAL,
			TOKEN_LY_LN_NORMAL,
			TOKEN_LY_LN_CURVEDLEN,
			TOKEN_LY_LN_DEVIATION,
			TOKEN_LY_LN_FILTER,
			TOKEN_LY_LN_EXTENALPARAM,

			// cube particles system
			TOKEN_LY_CP_AREA,
			// shpere particles system
			TOKEN_LY_SP_AREA,
			// cylinder particles system
			TOKEN_LY_LP_AREA,

			// 3dEditableSurface system
			TOKEN_LY_ES_ROW,
			TOKEN_LY_ES_COLUMN,
			TOKEN_LY_ES_INTERVAL,
			TOKEN_LY_ES_OFFVIEWPORT,
			TOKEN_LY_ES_VECTORS,
			TOKEN_LY_ES_COLORS,
			TOKEN_LY_ES_DECAL,

			// Model system
			TOKEN_LY_SMD_TRANSPARENT,
			TOKEN_LY_SMD_NAME,

			// model
			TOKEN_LY_MOD_NAME,
			TOKEN_LY_MOD_SKELETON,
			TOKEN_LY_MOD_ANIMATION,

			// skin system
			TOKEN_LY_DMD_TRANSPARENT,
			TOKEN_LY_DMD_SKELETON,
			TOKEN_LY_DMD_SKIN,
			TOKEN_LY_DMD_ANIMATION,
			TOKEN_LY_DMD_ATTACHMODEL,
			TOKEN_LY_DMD_ATTACHBONE,
			TOKEN_LY_DMD_REPEATCOUNT,

			// sprite animation
			TOKEN_LY_SA_USEG,
			TOKEN_LY_SA_VSEG,
			TOKEN_LY_SA_WIDTH,
			TOKEN_LY_SA_HEIGHT,
			TOKEN_LY_SA_SPEED,

			// ChildEffect system
			TOKEN_LY_CE_NAME,
			TOKEN_LY_CE_LOOP,
			TOKEN_LY_CE_SPEED,

			// Particle base system
			TOKEN_LY_PT_PREWARM,
			TOKEN_LY_PT_QUOTA,
			TOKEN_LY_PT_WIDTH,
			TOKEN_LY_PT_HEIGHT,
			TOKEN_LY_PT_3DBILLBOARD,
			TOKEN_LY_PT_PERPENDICULAR,
			TOKEN_LY_PT_3DTRANS,
			TOKEN_LY_PT_NOTRANSSCALE,
			TOKEN_LY_PT_NOSCALEWIDTH,
			TOKEN_LY_PT_NOSCALEHEIGHT,
			TOKEN_LY_PT_CENTEROFFSETW,
			TOKEN_LY_PT_CENTEROFFSETH,
			TOKEN_LY_PT_EMITTERRATE,
			TOKEN_LY_PT_EMITTERANGLE,
			TOKEN_LY_PT_SPEED,
			TOKEN_LY_PT_MAXSPEED,
			TOKEN_LY_PT_ADDSPEED,
			TOKEN_LY_PT_LEAVETIME,
			TOKEN_LY_PT_MAXLEAVETIME,
			TOKEN_LY_PT_MINCOLOR,
			TOKEN_LY_PT_MAXCOLOR,
			TOKEN_LY_PT_MINSCALE,
			TOKEN_LY_PT_MAXSCALE,
			TOKEN_LY_PT_MIN2DANGLE,
			TOKEN_LY_PT_MAX2DANGLE,
			TOKEN_LY_PT_FALLOWPARENT,
			TOKEN_LY_PT_EMITTERINSURFACE,

			TOKEN_LY_PT_ANIMROWNUM,
			TOKEN_LY_PT_ANIMCOLUMNNUM,
			TOKEN_LY_PT_ANIMTIMEGAP,
			TOKEN_LY_PT_ANIMSTARTINDEX,
			TOKEN_LY_PT_ANIMENDINDEX,
			TOKEN_LY_PT_ANIMTILED,


			TOKEN_LY_PT_CHILDEFFECT_NAME,
			TOKEN_LY_PT_CHILDEFFECT_LOOP,
			TOKEN_LY_PT_CHILDEFFECT_SPEED,

			// 
			TOKEN_MATERIAL,
			TOKEN_MT_BLENDMODE,
			TOKEN_MT_DEPTHMODE,
			TOKEN_MT_ZWRITTING,
			TOKEN_MT_TEXTURE,
			TOKEN_MT_SWAPUV,
			TOKEN_MT_FLIPU,
			TOKEN_MT_FLIPV,
			TOKEN_MT_TASPEEDU,
			TOKEN_MT_TASPEEDV,
			TOKEN_MT_CLAMPMODE,
			TOKEN_MT_SCRIPTSEGMENTU,
			TOKEN_MT_SCRIPTSEGMENTV,
			TOKEN_MT_SCRIPTSPEED,
			TOKEN_MT_UVVALUE,
			TOKEN_MT_RENDERPRIORITY,

			// 第2张贴图 的属性
			TOKEN_MT_UV2_ENABLE,
			TOKEN_MT_UV2_RGB_BLENDMODE,
			TOKEN_MT_UV2_A_BLENDMODE,
			TOKEN_MT_TEXTURE1,
			TOKEN_MT_SWAPUV1,
			TOKEN_MT_FLIPU1,
			TOKEN_MT_FLIPV1,
			TOKEN_MT_TASPEEDU1,
			TOKEN_MT_TASPEEDV1,
			TOKEN_MT_UVVALUE1,
			TOKEN_MT_DSL_ENABLE,    //溶解
			TOKEN_MT_DSL_THRESHOLD,
			TOKEN_MT_DSL_SPEED,

			// Distortion
			TOKEN_DS_ENABEL,
			TOKEN_DS_TEXTURE,
			TOKEN_DS_UVVALUE,
			TOKEN_DS_ALPHA_THRESHOLD,
			TOKEN_DS_TC_OFFSETU,
			TOKEN_DS_TC_OFFSETV,
			TOKEN_DS_TC_SCALEU,
			TOKEN_DS_TC_SCALEV,
			TOKEN_DS_BLEND_WEIGHT,
			TOKEN_DS_TYPE,
			TOKEN_DS_ONLY,

			//glow
			TOKEN_GL_ENABLE,

			// EffectKeyFrame system
			TOKEN_KEYFRAME,
			TOKEN_KF_POSITION,
			TOKEN_KF_ORITATION,
			TOKEN_KF_PITCH,
			TOKEN_KF_YAW,
			TOKEN_KF_ROLL,
			TOKEN_KF_SELFROTATE,
			TOKEN_KF_SCALE,
			TOKEN_KF_COLOR,
			TOKEN_KF_BEGINTIME,
			TOKEN_KF_AFFECTTIME,
			TOKEN_KF_INTERPOLATION,
			TOKEN_KF_SIMPLESPLINE,
			TOKEN_KF_AUTOORITATIONFORSPLINE,

			// EffectKeyFrame AudioSound
			TOKEN_KF_AUDIO_ENABLE,
			TOKEN_KF_AUDIO_RANDOMSOUND1,
			TOKEN_KF_AUDIO_RANDOMSOUND2,
			TOKEN_KF_AUDIO_VOLUME,
			TOKEN_KF_AUDIO_PROBABILITY,
			TOKEN_KF_AUDIO_LOOP,
			TOKEN_KF_AUDIO_3DMODE,
			TOKEN_KF_AUDIO_MINDISTANCE,
			TOKEN_KF_AUDIO_MAXDISTANCE,

			// EffectParticleControllerSet System
			TOKEN_PARTICLECONTROLLERSET,

			// EffectController System
			TOKEN_CONTROLLER,
			TOKEN_CL_BEGINTIME,
			TOKEN_CL_ENDTIME,

			// EffectTranslation system
			TOKEN_CL_TS_DIRECTION,
			TOKEN_CL_TS_SPEED,
			TOKEN_CL_TS_ADDSPEED,

			// EffectRotationSelf System
			TOKEN_CL_RS_SPEED,
			TOKEN_CL_RS_ADDSPEED,

			// EffectRotationAxis System
			TOKEN_CL_RA_AXISPOSITION,
			TOKEN_CL_RA_AXISDIRECTION,
			TOKEN_CL_RA_SPEED,
			TOKEN_CL_RA_ADDSPEED,

			// EffectRotationRevolution System
			TOKEN_CL_RR_AXISPOSITION,
			TOKEN_CL_RR_AXISDIRECTION,
			TOKEN_CL_RR_SPEED,
			TOKEN_CL_RR_ADDSPEED,

			// Offcenter system
			TOKEN_CL_OC_OFFCENTER,
			TOKEN_CL_OC_SPEED,
			TOKEN_CL_OC_ADDSPEED,

			// colorChange system
			TOKEN_CL_CC_COLORR,
			TOKEN_CL_CC_COLORG,
			TOKEN_CL_CC_COLORB,
			TOKEN_CL_CC_COLORA,

			// colorNoise system
			TOKEN_CL_CN_SWING,
			TOKEN_CL_CN_WAVELEN,
			TOKEN_CL_CN_BASECOLOR,

			// colorSet system
			TOKEN_CL_CS_BEGINCOLOR,
			TOKEN_CL_CS_SETNUM,
			TOKEN_CL_CS_TARGET1,
			TOKEN_CL_CS_TIME1,
			TOKEN_CL_CS_TARGET2,
			TOKEN_CL_CS_TIME2,
			TOKEN_CL_CS_TARGET3,
			TOKEN_CL_CS_TIME3,
			TOKEN_CL_CS_TARGET4,
			TOKEN_CL_CS_TIME4,

			// scaleSet system
			TOKEN_CL_SS_BEGINSCALE,
			TOKEN_CL_SS_SETNUM,
			TOKEN_CL_SS_TARGET1,
			TOKEN_CL_SS_TIME1,
			TOKEN_CL_SS_TARGET2,
			TOKEN_CL_SS_TIME2,
			TOKEN_CL_SS_TARGET3,
			TOKEN_CL_SS_TIME3,
			TOKEN_CL_SS_TARGET4,
			TOKEN_CL_SS_TIME4,

			// scaleChange system
			TOKEN_CL_SC_SCALE,
			TOKEN_CL_SC_MINSCALE,
			TOKEN_CL_SC_MAXSCALE,

			// scalenoise  system
			TOKEN_CL_SN_SWING,
			TOKEN_CL_SN_WAVELEN,

			// uvSpeedSet system
			TOKEN_CL_UVSS_EFFECTTEXTURE,
			TOKEN_CL_UVSS_BEGINSCALE,
			TOKEN_CL_UVSS_SETNUM,
			TOKEN_CL_UVSS_TARGET1,
			TOKEN_CL_UVSS_TIME1,
			TOKEN_CL_UVSS_TARGET2,
			TOKEN_CL_UVSS_TIME2,
			TOKEN_CL_UVSS_TARGET3,
			TOKEN_CL_UVSS_TIME3,
			TOKEN_CL_UVSS_TARGET4,
			TOKEN_CL_UVSS_TIME4,

			TOKEN_Max,
		};

		static const String token[TOKEN_Max];
	};
}
#endif
