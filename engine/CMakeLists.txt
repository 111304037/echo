MESSAGE( STATUS "Configuring module: Engine...")

# Set Module Name
SET(MODULE_NAME engine)

# Set Module Path
SET(MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

# set include files
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH})
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/render)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/render/render)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/script/lua)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/spine/)
INCLUDE_DIRECTORIES(${ECHO_SRC_PATH}/ThirdParty/FreeImage)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/Recast/Recast)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/Recast/Detour)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/Recast/DetourCrowd)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/Recast/DetourTileCache)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/opengles/mali/include)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/physx/physx/include)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/physx/pxshared/include)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/include)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/freetype-2.10.0/include)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/radeonrays/RadeonRays/include)

IF(${ECHO_PLATFORM_WINDOWS})
    INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/render/gles)
	INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-soft/include)
    INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/vulkan/windows/x64/include)
ELSEIF(ECHO_PLATFORM_LINUX)
    INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-soft/include)
    INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/vulkan/linux/x86_64/include)
ELSEIF(ECHO_PLATFORM_ANDROID)
    INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-soft/include)
ENDIF()

# Configure FILE
CONFIGURE_FILE(
	${CMAKE_CURRENT_SOURCE_DIR}/core/base/echo_config.h.in
	${CMAKE_CURRENT_SOURCE_DIR}/core/base/echo_config.h
)

IF(${ECHO_PLATFORM_MAC})
    SET(MAC_MM_FILES *.mm)
ELSE()
    SET(MAC_MM_FILES)
ENDIF()

# Get All Files
FILE(GLOB_RECURSE HEADER_FILES  *.h *.hpp *.inl)
FILE(GLOB_RECURSE SOURCE_FILES *.cpp *.c *.cc *.cx ${MAC_MM_FILES})

SET(ALL_FILES ${HEADER_FILES} ${SOURCE_FILES} CMakeLists.txt)

# Remove render library
IF(${ECHO_PLATFORM_WINDOWS})
	EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${MODULE_PATH}/core/render/metal/*.*)
ELSEIF(${ECHO_PLATFORM_MAC})
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${MODULE_PATH}/core/render/gles/*.*)
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${MODULE_PATH}/core/render/vulkan/*.*)
ELSEIF(${ECHO_PLATFORM_LINUX})
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${MODULE_PATH}/core/render/gles/*.*)
ELSEIF(${ECHO_PLATFORM_IOS})
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${MODULE_PATH}/core/render/vulkan/*.*)
ENDIF()

GROUP_FILES_NO_INCLUDE(ALL_FILES ${CMAKE_CURRENT_SOURCE_DIR})

IF(ECHO_UNICODE)
	ADD_DEFINITIONS("-DUNICODE -D_UNICODE")
ENDIF()

ADD_LIBRARY(${MODULE_NAME} STATIC ${ALL_FILES} CMakeLists.txt)

SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "core")

IF(APPLE)
  SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++1z")
ENDIF()

MESSAGE(STATUS "Configure success!")
