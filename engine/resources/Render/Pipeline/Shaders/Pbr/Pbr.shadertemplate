<?xml version="1.0" encoding="utf-8"?>
<res class="ShaderTemplate" path="Engine://Render/Pipeline/Shaders/Pbr/Pbr.shadertemplate" VertexShader="#version 450&#10;&#10;${VS_MACROS}&#10;&#10;// uniforms&#10;layout(binding = 0) uniform UBO&#10;{&#10;	mat4 u_WorldMatrix;&#10;	mat4 u_ViewProjMatrix;&#10;} vs_ubo;&#10;&#10;// inputs&#10;layout(location = 0) in vec3 a_Position;&#10;&#10;#ifdef ENABLE_VERTEX_POSITION&#10;struct Position&#10;{&#10;	vec3 local;&#10;	vec3 world;&#10;	vec3 view;&#10;};&#10;layout(location = 0) out Position v_Position;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_NORMAL&#10;layout(location = 1) in vec3 a_Normal;&#10;layout(location = 3) out vec3 v_Normal;&#10;layout(location = 4) out vec3 v_NormalLocal;&#10;&#10;#ifdef HAS_TANGENTS&#10;	layout(location = 2) in vec4 a_Tangent;&#10;	layout(location = 5) out mat3 v_TBN;&#10;#endif&#10;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_COLOR&#10;layout(location = 3) in vec4 a_Color;&#10;layout(location = 6) out vec4 v_Color;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_UV0&#10;layout(location = 4) in vec2 a_UV;&#10;layout(location = 7) out vec2 v_UV;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_BLENDING&#10;layout(location = 5) in vec4 a_Weight;&#10;layout(location = 8) out vec4 v_Weight;&#10;&#10;layout(location = 6) in vec4 a_Joint;&#10;layout(location = 9) out vec4 v_Joint;&#10;#endif&#10;&#10;void main(void)&#10;{&#10;	 // local space   [-inf, -inf] to [+inf, +inf]&#10;	 //     \/                                     -- localToWorld (Model)&#10;	 // world space   [-inf, -inf] to [+inf, +inf]&#10;	 //     \/                                     -- worldToCamera (View)&#10;	 // camera space  [-inf, -inf] to [+inf, +inf]&#10;	 //     \/                                     -- projectionMatrix (Projection)&#10;	 // clip space    [  -1,   -1] to [   1,    1]&#10;	 //     \/                                     &#10;	 // view space    [   0,    0] to [   1,    1] \&#10;	 //     \/                                      -- handled by GPU / driver&#10;	 // screen space  [   0,    0] to [   W,    H] /&#10;&#10;	vec4 worldPosition = vs_ubo.u_WorldMatrix * vec4(a_Position, 1.0);&#10;    vec4 clipPosition = vs_ubo.u_ViewProjMatrix * worldPosition;&#10;&#10;#ifdef ENABLE_VERTEX_POSITION&#10;	v_Position.local = a_Position;&#10;	v_Position.world = worldPosition.xyz;&#10;	v_Position.view = (clipPosition.xyz / clipPosition.w + vec3(1.0)) * 0.5;&#10;#endif&#10;&#10;	gl_Position = clipPosition;&#10;&#10;#ifdef ENABLE_VERTEX_NORMAL&#10;	#ifdef HAS_TANGENTS&#10;		vec3 normalW = normalize(vec3(vs_ubo.u_WorldMatrix * vec4(a_Normal.xyz, 0.0)));&#10;		vec3 tangentW = normalize(vec3(vs_ubo.u_WorldMatrix * vec4(a_Tangent.xyz, 0.0)));&#10;		vec3 bitangentW = cross(normalW, tangentW) * a_Tangent.w;&#10;		v_Normal = normalW;&#10;		v_TBN = mat3(tangentW, bitangentW, normalW);&#10;	#else // HAS_TANGENTS != 1&#10;		v_Normal = normalize(vec3(vs_ubo.u_WorldMatrix * vec4(a_Normal.xyz, 0.0)));&#10;	#endif&#10;&#10;	v_NormalLocal = a_Normal;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_COLOR&#10;	v_Color = a_Color;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_UV0    &#10;    v_UV = a_UV;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_BLENDING&#10;	v_Weight = a_Weight;&#10;	v_Joint = a_Joint;&#10;#endif&#10;&#10;}" FragmentShader="#version 450&#10;&#10;${FS_MACROS}&#10;&#10;precision mediump float;&#10;&#10;// uniforms&#10;${FS_UNIFORMS}&#10;&#10;// texture uniforms&#10;${FS_TEXTURE_UNIFORMS}&#10;&#10;// inputs&#10;#ifdef ENABLE_VERTEX_POSITION&#10;struct Position&#10;{&#10;	vec3 local;&#10;	vec3 world;&#10;	vec3 view;&#10;};&#10;layout(location = 0) in Position  v_Position;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_NORMAL&#10;layout(location = 3) in vec3 v_Normal;&#10;layout(location = 4) in vec3 v_NormalLocal;&#10;#ifdef HAS_TANGENTS&#10;	layout(location = 5) in mat3 v_TBN;&#10;#endif&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_COLOR&#10;layout(location = 6) in vec4  v_Color;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_UV0&#10;layout(location = 7) in vec2  v_UV;&#10;#endif&#10;&#10;#ifdef ENABLE_VERTEX_BLENDING&#10;layout(location = 8) in vec4 v_Weight;&#10;layout(location = 9) in vec4 v_Joint;&#10;#endif&#10;&#10;// outputs&#10;layout(location = 0) out vec4 o_FragColor;&#10;&#10;// custom functions&#10;${FS_FUNCTIONS}&#10;&#10;// functions&#10;// #define SRGB_FAST_APPROXIMATION&#10;&#10;// normal map&#10;vec3 _NormalMapFun(vec3 n)&#10;{&#10;#ifdef HAS_TANGENTS&#10;	return normalize(v_TBN * (2.0 * n - 1.0));&#10;#else&#10;	return normalize(2.0 * n - 1.0);&#10;#endif&#10;}&#10;&#10;// Encapsulate the various inputs used by the various functions in the shading equation&#10;// We store values in this struct to simplify the integration of alternative implementations&#10;// of the shading terms, outlined in the Readme.MD Appendix.&#10;struct PBRInfo&#10;{&#10;    float NdotL;                  // cos angle between normal and light direction&#10;    float NdotV;                  // cos angle between normal and view direction&#10;    float NdotH;                  // cos angle between normal and half vector&#10;    float LdotH;                  // cos angle between light direction and half vector&#10;    float VdotH;                  // cos angle between view direction and half vector&#10;    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)&#10;    float metalness;              // metallic value at the surface&#10;    vec3 reflectance0;            // full reflectance color (normal incidence angle)&#10;    vec3 reflectance90;           // reflectance color at grazing angle&#10;    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])&#10;    vec3 diffuseColor;            // color contribution from diffuse lighting&#10;    vec3 specularColor;           // color contribution from specular lighting&#10;};&#10;&#10;const float M_PI = 3.141592653589793;&#10;const float c_MinRoughness = 0.04;&#10;&#10;// Basic Lambertian diffuse&#10;// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog&#10;// See also [1], Equation 1&#10;vec3 diffuse(PBRInfo pbrInputs)&#10;{&#10;    return pbrInputs.diffuseColor / M_PI;&#10;}&#10;&#10;// The following equation models the Fresnel reflectance term of the spec equation (aka F())&#10;// Implementation of fresnel from [4], Equation 15&#10;vec3 specularReflection(PBRInfo pbrInputs)&#10;{&#10;    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);&#10;}&#10;&#10;// This calculates the specular geometric attenuation (aka G()),&#10;// where rougher material will reflect less light back to the viewer.&#10;// This implementation is based on [1] Equation 4, and we adopt their modifications to&#10;// alphaRoughness as input as originally proposed in [2].&#10;float geometricOcclusion(PBRInfo pbrInputs)&#10;{&#10;    float NdotL = pbrInputs.NdotL;&#10;    float NdotV = pbrInputs.NdotV;&#10;    float r = pbrInputs.alphaRoughness;&#10;&#10;    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));&#10;    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));&#10;    return attenuationL * attenuationV;&#10;}&#10;&#10;// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())&#10;// Implementation from &quot;Average Irregularity Representation of a Roughened Surface for Ray Reflection&quot; by T. S. Trowbridge, and K. P. Reitz&#10;// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.&#10;float microfacetDistribution(PBRInfo pbrInputs)&#10;{&#10;    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;&#10;    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;&#10;    return roughnessSq / (M_PI * f * f);&#10;}&#10;&#10;vec3 PbrLighting(vec3 pixelPosition, vec3 baseColor, vec3 normal, float metallic, float perceptualRoughness, vec3 eyePosition)&#10;{&#10;    // Roughness is authored as perceptual roughness; as is convention,&#10;    // convert to material roughness by squaring the perceptual roughness [2].&#10;    float alphaRoughness = perceptualRoughness * perceptualRoughness;&#10;&#10;	vec3 f0 = vec3(0.04);&#10;    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);&#10;    diffuseColor *= 1.0 - metallic;&#10;    vec3 specularColor = mix(f0, baseColor.rgb, metallic);&#10;&#10;    // Compute reflectance.&#10;    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);&#10;&#10;    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.&#10;    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.&#10;    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);&#10;&#10;    vec3 specularEnvironmentR0 = specularColor.rgb;&#10;    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;&#10;&#10;    vec3 n = normal;								// normal at surface point&#10;    vec3 v = normalize(eyePosition - pixelPosition);// Vector from surface point to camera&#10;    float NdotV = abs(dot(n, v)) + 0.001;&#10;&#10;	// Multiple lights&#10;    vec3 _lightDir = normalize(vec3(1.0, 1.0, 1.0));&#10;    vec3 _lightColor = vec3(0.8, 0.8, 0.8);&#10;&#10;	// depend on light direction&#10;    vec3 l = normalize(_lightDir);             // Vector from surface point to light&#10;    vec3 h = normalize(l+v);                          // Half vector between both l and v&#10;    vec3 reflection = -normalize(reflect(v, n));&#10;	&#10;	float NdotL = clamp(dot(n, l), 0.001, 1.0);&#10;    float NdotH = clamp(dot(n, h), 0.0, 1.0);&#10;    float LdotH = clamp(dot(l, h), 0.0, 1.0);&#10;    float VdotH = clamp(dot(v, h), 0.0, 1.0);&#10;&#10;    PBRInfo pbrInputs = PBRInfo(&#10;        NdotL,&#10;        NdotV,&#10;        NdotH,&#10;        LdotH,&#10;        VdotH,&#10;        perceptualRoughness,&#10;        metallic,&#10;        specularEnvironmentR0,&#10;        specularEnvironmentR90,&#10;        alphaRoughness,&#10;        diffuseColor,&#10;        specularColor&#10;    );&#10;&#10;    // Calculate the shading terms for the microfacet specular shading model&#10;    vec3 F = specularReflection(pbrInputs);&#10;    float G = geometricOcclusion(pbrInputs);&#10;    float D = microfacetDistribution(pbrInputs);&#10;&#10;    // Calculation of analytical lighting contribution&#10;    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);&#10;    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);&#10;&#10;    vec3 color = NdotL * _lightColor * (diffuseContrib + specContrib);&#10;&#10;	// environment color&#10;    vec3 _environmentLightColor = vec3(0.09, 0.09, 0.09);&#10;	color += baseColor * _environmentLightColor;&#10;&#10;	return color;&#10;}&#10;&#10;void main(void)&#10;{&#10;${FS_SHADER_CODE}&#10;&#10;#ifndef ENABLE_BASE_COLOR &#10;    vec3 __BaseColor = vec3(0.6);&#10;#endif&#10;&#10;#ifndef ENABLE_OPACITY&#10;    float __Opacity = 1.0;&#10;#endif&#10;&#10;#ifndef ENABLE_METALIC&#10;	float __Metalic = 0.2;&#10;#endif&#10;&#10;#ifndef ENABLE_ROUGHNESS&#10;	float __PerceptualRoughness = 0.5;&#10;#endif&#10;&#10;#ifdef ENABLE_LIGHTING_CALCULATION&#10;	__BaseColor = PbrLighting(v_Position.world, __BaseColor, __Normal, __Metalic, __PerceptualRoughness, fs_ubo.u_CameraPosition);&#10;#endif&#10;&#10;#ifdef ENABLE_OCCLUSION&#10;	__BaseColor.rgb = __BaseColor.rgb * __AmbientOcclusion;&#10;#endif&#10;&#10;#ifdef ENABLE_EMISSIVE&#10;	__BaseColor.rgb += __Emissive;&#10;#endif  &#10;&#10;    o_FragColor = vec4(__BaseColor.rgb, __Opacity);&#10;}" />
