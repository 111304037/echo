# set module name
SET(MODULE_NAME libuv)

# setting
set(CMAKE_C_STANDARD 90)
set(CMAKE_C_EXTENSIONS ON)

# message
MESSAGE( STATUS "Configuring module: ${MODULE_NAME} ...")

# include directories
INCLUDE_DIRECTORIES( ${LORD_SRC_PATH})
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/include)

# link
LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

# recursive get all module files
FILE( GLOB_RECURSE ALL_FILES *.h *.inl *.hpp *.c *.cpp *.mm)

IF(ECHO_PLATFORM_WINDOWS)
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/src/unix/*.*)
ELSE()
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/src/win/*.*)
ENDIF()

# group files by folder
GROUP_FILES(ALL_FILES ${CMAKE_CURRENT_SOURCE_DIR})

IF(ECHO_PLATFORM_WINDOWS)
	ADD_DEFINITIONS("-DWIN32_LEAN_AND_MEAN")
ENDIF()

# generate module library
ADD_LIBRARY(${MODULE_NAME} ${ALL_FILES} CMakeLists.txt)

# set folder
SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "thirdparty")

# log
MESSAGE(STATUS "Configure success!")
