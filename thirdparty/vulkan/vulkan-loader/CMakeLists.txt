# Set Module Name
SET(MODULE_NAME vulkan-loader)

# message
MESSAGE( STATUS "Configuring module: ${MODULE_NAME} ...")

# Include Directories
INCLUDE_DIRECTORIES( ${ECHO_ROOT_PATH})
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES( ${ECHO_ROOT_PATH}/thirdparty/vulkan/vulkan-headers/include)

# Link Directories
LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

# Recursive get all files
FILE( GLOB_RECURSE ALL_FILES *.h *.inl *.c *.cpp *.mm)

# Remove files by platform
IF(ECHO_PLATFORM_WINDOWS)
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/fuchsia/*.*)
    EXCLUDE_FILES(ALL_FILES GLOB_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/loader/asm_offset.c)
ELSEIF(ECHO_PLATFORM_MAC OR ECHO_PLATFORM_LINUX OR ECHO_PLATFORM_IOS OR ECHO_PLATFORM_ANDROID)
ENDIF()

# Group
GROUP_FILES(ALL_FILES ${CMAKE_CURRENT_SOURCE_DIR})

# Add Macro
IF(ECHO_PLATFORM_WINDOWS)
    ADD_DEFINITIONS(-DVK_USE_PLATFORM_WIN32_KHR)
ENDIF()

# Add library
ADD_LIBRARY(${MODULE_NAME} ${ALL_FILES} CMakeLists.txt)

# Set property
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS API_NAME="Vulkan")

# Set Folder
SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "thirdparty/khronosgroup")

# Message
MESSAGE(STATUS "Configure success!")
