# configure
SET(CMAKE_INCLUDE_CURRENT_DIR ON)
ADD_DEFINITIONS(-DQT_STATICPLUGIN)

#SET(CMAKE_AUTOMOC On)

# VS  http://www.oschina.net/code/explore/mariadb-5.2.4/CMakeLists.txt
IF(MSVC)
	SET(CMAKE_CXX_FLAGS_DEBUG			"${CMAKE_CXX_FLAGS_DEBUG} /wd4996 /wd4819 /MP /openmp")
	SET(CMAKE_CXX_FLAGS_RELEASE			"${CMAKE_CXX_FLAGS_RELEASE} /wd4996 /wd4819 /MP /openmp")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_DEBUG				"${CMAKE_C_FLAGS_DEBUG} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_RELEASE			"${CMAKE_C_FLAGS_RELEASE} /wd4996 /wd4819  /MP /openmp")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO	"${CMAKE_C_FLAGS_RELWITHDEBINFO} /wd4996 /wd4819  /MP /openmp")
ENDIF(MSVC)

# Policy
CMAKE_POLICY(SET CMP0020 NEW)

INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH})
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/editor/QLibrary/Resources/QLibrary)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/editor/QLibrary/Resources/QLibrary/nodeeditor)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/editor/QLibrary/Resources/QLibrary/propertyeditor)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/ThirdParty/adrenoSDK/inc)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine)
INCLUDE_DIRECTORIES(${ECHO_ROOT_PATH}/engine/core/render)

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

IF(${ECHO_PLATFORM_WINDOWS})
	IF(CMAKE_SIZEOF_VOID_P EQUAL 4)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/opengles/mali/lib/win32)
		#LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-1.1/windows/libs/Win32)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/lib/windows/x86)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/vulkan/windows/x64/lib)
	ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/opengles/mali/lib/win64)
		#LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/openal-1.1/windows/libs/Win64)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/lib/windows/x86_64)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/opencl/windows/lib/x64)
		LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/vulkan/windows/x64/lib)
	ENDIF()
ELSE()
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/thirdparty/live2d/Cubism31SdkNative-EAP5/Core/lib/macos)
ENDIF()

# set module name
SET(MODULE_NAME Echo)

# set path
SET(MODULE_HEADER_PATH   ${ECHO_ROOT_PATH}/editor/${MODULE_NAME})
SET(MODULE_SOURCE_PATH   ${ECHO_ROOT_PATH}/editor/${MODULE_NAME})
SET(MODULE_RESOURCE_PATH ${ECHO_ROOT_PATH}/editor/echo/Resource)
SET(QLIBRARY_PATH        ${ECHO_ROOT_PATH}/editor/QLibrary)

IF(${ECHO_PLATFORM_MAC})
	FILE(GLOB_RECURSE MAC_SOURCE_FILES	${MODULE_SOURCE_PATH}/*.mm)
ELSE()
	SET(MAC_SOURCE_FILES)
ENDIF()

# recursive get files
FILE(GLOB_RECURSE HEADER_FILES		${MODULE_HEADER_PATH}/*.h ${MODULE_HEADER_PATH}/*.inl)
FILE(GLOB_RECURSE SOURCE_FILES		${MODULE_SOURCE_PATH}/*.c ${MODULE_SOURCE_PATH}/*.cpp ${MODULE_SOURCE_PATH}/*.cx ${MAC_SOURCE_FILES})
FILE(GLOB_RECURSE UI_FILES			${MODULE_SOURCE_PATH}/*.ui)
FILE(GLOB_RECURSE QT_HEADER_FILES	${MODULE_HEADER_PATH}/Game/UI/*.h ${MODULE_HEADER_PATH}/Editor/UI/*.h)
FILE(GLOB_RECURSE QL_HEADER_FILES	${QLIBRARY_PATH}/*.h ${QLIBRARY_PATH}/*.hpp)
FILE(GLOB_RECURSE QL_SOURCE_FILES   ${QLIBRARY_PATH}/*.cpp)

GROUP_FILES(HEADER_FILES	${MODULE_HEADER_PATH})
GROUP_FILES(SOURCE_FILES	${MODULE_SOURCE_PATH})
GROUP_FILES(QL_HEADER_FILES ${QLIBRARY_PATH})
GROUP_FILES(QL_SOURCE_FILES ${QLIBRARY_PATH})
GROUP_QT_UI_FILES(UI_FILES	${MODULE_SOURCE_PATH})
GROUP_QT_MOC_FILES(QT_HEADER_FILES)
GROUP_QT_MOC_FILES(QL_HEADER_FILES)

# recursive get qt files
FILE(GLOB_RECURSE RESOURCE_QT_FILES	${MODULE_SOURCE_PATH}/*.qrc)
FILE(GLOB_RECURSE RESOURCE_FILES	${MODULE_SOURCE_PATH}/*.rc ${MODULE_SOURCE_PATH}/*.qml ${MODULE_SOURCE_PATH}/*.qss)

QT5_ADD_RESOURCES(MODULE_QT_RCC_SRCS ${RESOURCE_QT_FILES})
SOURCE_GROUP("resources" FILES ${MODULE_QT_RCC_SRCS} ${RESOURCE_QT_FILES} ${RESOURCE_FILES})

# add executable
ADD_EXECUTABLE(${MODULE_NAME}
	${HEADER_FILES}
	${SOURCE_FILES}
	${QT_HEADER_FILES}
	${QL_HEADER_FILES}
	${QL_SOURCE_FILES}
	${UI_FILES}
	${RESOURCE_FILES}
	${RESOURCE_QT_FILES}
	${MODULE_QT_RCC_SRCS}
	${ASTUDIO_QT_FILES}
	CMakeLists.txt)

# link libraries
TARGET_LINK_LIBRARIES(${MODULE_NAME} zlib engine lua recast freeimage physx)
TARGET_LINK_LIBRARIES(${MODULE_NAME} Live2DCubismCore pugixml spine box2d)
TARGET_LINK_LIBRARIES(${MODULE_NAME} freetype)
TARGET_LINK_LIBRARIES(${MODULE_NAME} radeonrays)
TARGET_LINK_LIBRARIES(${MODULE_NAME} glslang spirv-cross)

# line qt
TARGET_LINK_QTLIBRARIES(${MODULE_NAME})

IF(${ECHO_PLATFORM_WINDOWS})
	TARGET_LINK_LIBRARIES(${MODULE_NAME} winmm.lib imm32.lib dxgi.lib Shlwapi.lib)
	TARGET_LINK_LIBRARIES(${MODULE_NAME} libEGL.lib libGLESv2.lib libMaliEmulator.lib)
	TARGET_LINK_LIBRARIES(${MODULE_NAME} dbghelp.lib Psapi.lib)
	TARGET_LINK_LIBRARIES(${MODULE_NAME} openal-soft)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} OpenCL)
	TARGET_LINK_LIBRARIES(${MODULE_NAME} vulkan-1.lib)
    TARGET_LINK_LIBRARIES(${MODULE_NAME} jplayer)
ELSE()
	# AddFrameWork Macro
	MACRO(ADD_FRAMEWORK fwname)
		SET(FRAMEWORKS "${FRAMEWORKS} -framework ${fwname}")
	ENDMACRO(ADD_FRAMEWORK)

	ADD_FRAMEWORK(AppKit)
    ADD_FRAMEWORK(QuartzCore)
    ADD_FRAMEWORK(Metal)
    ADD_FRAMEWORK(OpenAL)
    ADD_FRAMEWORK(OpenCL)

	SET(FRAMEWORKS "${FRAMEWORKS} -ObjC")
	SET(CMAKE_EXE_LINKER_FLAGS ${FRAMEWORKS})
ENDIF()

# set folder
SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "editor")

IF(MSVC)
	# set target properties
	SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS /entry:mainCRTStartup")
	#SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS "/level='requireAdministrator' /uiAccess='false' ")

	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINER_FLAGS} /SAFESEH:NO")
	SET(CMAKE_EXE_LINKER_FLAGS_VERSION "${CMAKE_EXE_LINER_FLAGS} /SAFESEH:NO")
ELSE()
    SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES MACOSX_FRAMEWORK_INFO_PLIST ${MODULE_RESOURCE_PATH}/mac/Info.plist)
	SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++14")
	SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2")
ENDIF()

# set dependencies
ADD_DEPENDENCIES(${MODULE_NAME} engine)
