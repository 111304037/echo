#include <QGraphicsScene>
#include <QGraphicsView>
#include <engine/core/math/Rect.h>

namespace Echo
{
	void qGraphicsViewDisableViewportAutoUpdate(QWidget* view)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		if (graphicsView)
		{
			graphicsView->setViewportUpdateMode(QGraphicsView::NoViewportUpdate);
		}
	}

	void qGraphicsViewSceneRect(QWidget* view, Rect& rect)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		if (graphicsView)
		{
			QRect viewRect = graphicsView->viewport()->geometry();
			QRectF rectF = graphicsView->mapToScene(viewRect).boundingRect();
			rect.left = rectF.left();
			rect.top = rectF.top();
			rect.right = rectF.right();
			rect.bottom = rectF.bottom();
		}
	}

	void qGraphicsViewSetScene(QWidget* view, QObject* scene)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsView && graphicsScene)
		{
			graphicsView->setScene(graphicsScene);
			graphicsView->setRenderHint( QPainter::Antialiasing, true);
		}
	}

	void qGraphicsViewSetScale(QWidget* view, float scaleX, float scaleY)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		if (graphicsView)
		{
			graphicsView->scale(scaleX, scaleY);
		}
	}

	void qGraphicsViewSetBackgroundBrush(QWidget* view, const Color& color)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		if (graphicsView)
		{
			graphicsView->setBackgroundBrush(QColor::fromRgbF(color.r, color.g, color.b, color.a));
		}
	}

	void qGraphicsViewFitInView(QWidget* view, Rect& rect)
	{
		QGraphicsView* graphicsView = qobject_cast<QGraphicsView*>(view);
		if (graphicsView)
		{
			QRectF rectF;
			rectF.setLeft(rect.left);
			rectF.setTop(rect.top);
			rectF.setRight(rect.right);
			rectF.setBottom(rect.bottom);
			graphicsView->fitInView(rectF);
		}
	}
}