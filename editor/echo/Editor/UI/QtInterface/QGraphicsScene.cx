#include <QGraphicsScene>
#include <QGraphicsProxyWidget>
#include <QGraphicsSimpleTextItem>
#include <engine/core/math/color.h>
#include "Extend/QGraphicsEllipseItemEx.h"
#include "Extend/QGraphicsSceneEx.h"

namespace Echo
{
	QGraphicsScene* qGraphicsSceneNew()
	{
		return new QGraphicsSceneEx();
	}

	QGraphicsProxyWidget* qGraphicsSceneAddWidget(QObject* scene, QWidget* widget)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);	
		return graphicsScene ? graphicsScene->addWidget(widget) : nullptr;
	}

	QGraphicsItem* qGraphicsSceneAddLine(QObject* scene, float startX, float startY, float endX, float endY, const Color& color)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			QPen pen(QColor::fromRgbF(color.r, color.g, color.b, color.a));
			return graphicsScene->addLine( startX, startY, endX, endY, pen);
		}

		return nullptr;
	}

	QGraphicsItem* qGraphicsSceneAddRect(QObject* scene, float left, float top, float width, float height, const Color& penColor, const Color& brushColor)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			QRectF rect(left, top, width, height);
			QPen pen(QColor::fromRgbF(penColor.r, penColor.g, penColor.b, penColor.a));
			QBrush brush(QColor::fromRgbF(brushColor.r, brushColor.g, brushColor.b, brushColor.a));
			return graphicsScene->addRect(rect, pen, brush);
		}

		return nullptr;
	}

	QGraphicsItem* qGraphicsSceneAddPath(QObject* scene, const vector<Vector2>::type paths, float widthf, const Color& color)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			QPen pen(QColor::fromRgbF(color.r, color.g, color.b, color.a));
			pen.setWidthF(widthf);

			if (paths.size() > 1)
			{
				QPainterPath painterPath(QPointF(paths[0].x, paths[0].y));
				for (size_t i = 1; i<paths.size(); i++)
				{
					painterPath.lineTo(QPointF(paths[i].x, paths[i].y));
				}

				return graphicsScene->addPath(painterPath, pen);
			}
			else
			{
				return graphicsScene->addPath(QPainterPath(), pen);
			}
		}

		return nullptr;
	}

	QGraphicsItem* qGraphicsSceneAddEclipse(QObject* scene, float left, float top, float width, float height, const Color& color)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			QPen pen(QColor::fromRgbF(color.r, color.g, color.b, color.a));
			QBrush brush(QColor::fromRgbF(color.r, color.g, color.b, color.a));

			QGraphicsEllipseItemEx* eclipseItem = new QGraphicsEllipseItemEx;
			eclipseItem->setRect(left, top, width, height);
			eclipseItem->setPen(pen);
			eclipseItem->setBrush(brush);
			graphicsScene->addItem(eclipseItem);

			return eclipseItem;
		}

		return nullptr;
	}

	QGraphicsItem* qGraphicsSceneAddPixmap(QObject* scene, const char* fileName)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			QImage image(fileName);
			QGraphicsPixmapItem* pixmapItem = graphicsScene->addPixmap(QPixmap::fromImage(image));

			return pixmapItem;
		}

		return nullptr;
	}

	void qGraphicsSceneDeleteWidget(QObject* scene, QGraphicsProxyWidget* widget)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			graphicsScene->removeItem( widget);
		}
	}

	// delete item
	void qGraphicsSceneDeleteItem(QObject* scene, QGraphicsItem* item)
	{
		QGraphicsScene* graphicsScene = qobject_cast<QGraphicsScene*>(scene);
		if (graphicsScene)
		{
			graphicsScene->removeItem(item);

			//delete item;
		}
	}
}